@page "/projects/{id:int}"

@using static teko_projektarbeit_loesungsalgorithmen.Objects.User
@using teko_projektarbeit_loesungsalgorithmen.Components.Partials
@using teko_projektarbeit_loesungsalgorithmen.Objects
@using teko_projektarbeit_loesungsalgorithmen.Services

@inject SessionService SessionService
@inject DataService DataService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="card-header d-flex justify-content-between align-items-end">
    <h3>@(id == 0 ? "Neues Projekt" : (CurrentUser.Role != ProjectRole.Lead ? "Projekt ansehen" : "Projekt bearbeiten"))</h3>

    <a href="@(NavigationManager.Uri)/history" class="mb-2">Ältere Versionen</a>
</div>

<Project EditInstance="Project"></Project>

<div class="row mb- 4">
    <div class="co-12">
        <h2>Informationen</h2>
        <h3>Neu erstellen</h3>
        <div class="card mb-4">
            <div class="card-body">
                <div class="mb-3">
                    <label for="information-text">Inhalt der Information</label>
                    <textarea id="information-text" class="form-control comment-input" @bind="InformationText"></textarea>
                </div>


                <div class="row">
                    @for (int i = 0; i < InformationTags.Length; i++)
                    {
                        int localIndex = i;
                        <div class="col-4 mb-3">
                            <label for="tag-@localIndex">Tag @(localIndex + 1)</label>
                            <input id="tag-@localIndex" class="form-control" @bind="InformationTags[localIndex]" />
                        </div>
                    }
                </div>

                <button @onclick="SaveInformation" class="btn btn-primary">Speichern</button>
            </div>
        </div>

        <h3>Erfasste Informationen</h3>
        <div class="d-flex flex-wrap mb-4">
            @foreach (Objects.Information information in ProjectInformation)
            {
                <div class="col-12 mb-3 card">
                    <div class="card-body row">
                        <div class="col-12 d-flex justify-content-between heading mb-2">
                            <div class="left">
                                <span class="badge bg-secondary">@information.Tags[0]</span>
                                <span class="badge bg-secondary">@information.Tags[1]</span>
                                <span class="badge bg-secondary">@information.Tags[2]</span>
                            </div>
                            <div class="right">
                                <span>Verfasst von: @(DataService.GetUserById(information.AuthorId).Name ?? "Gelöscht")</span>
                            </div>
                        </div>
                        <p class="col-12 mb-0">
                            @information.Description
                        </p>
                    </div>
                </div>
            }

        </div>

    </div>
</div>

@code {

    [Parameter]
    public int id { get; set; }

    public Objects.Project Project { get; set; } = new Objects.Project(0, "", 0, "", "", 1);

    Objects.User CurrentUser = new Objects.User(0, "", ProjectRole.Staff);

    public List<Information> ProjectInformation = new List<Information>();

    public string InformationText { get; set; } = "";
    public string[] InformationTags { get; set; } = new string[3] { "", "", "" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CurrentUser = DataService.GetUserById((int)await SessionService.GetUserId()) ?? new Objects.User(0, "", ProjectRole.Staff);
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        List<Objects.Project> projectList = DataService.GetProjectById(id, 1);
        ProjectInformation = DataService.GetInformationsByProjectId(id);

        // Overwrite default empty project if we are editing one.
        if (projectList.Count > 0)
        {
            Project = projectList[0];
        }
    }

    private void SaveInformation()
    {
        List<Objects.Information> tempInformations = DataService.Informations;

        tempInformations.Add(new Objects.Information(DataService.GetNewInformationId(), Project.Id, InformationText, CurrentUser.Id, InformationTags, 1));

        DataService.Informations = tempInformations;

        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}
